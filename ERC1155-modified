// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts@4.8.0/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts@4.8.0/access/Ownable.sol";
import "@openzeppelin/contracts@4.8.0/token/ERC1155/extensions/ERC1155Burnable.sol";
import "@openzeppelin/contracts@4.8.0/token/ERC1155/extensions/ERC1155URIStorage.sol";
// import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol";

contract MyToken is ERC1155, Ownable, ERC1155Burnable , ERC1155URIStorage{
    constructor() ERC1155("") {}

    // function setURI(string memory newuri) public onlyOwner {
    //     _setURI(newuri);
    // }

    function mint(address account, uint256 id, uint256 amount, bytes memory data,string memory tokenURI)
        public
        onlyOwner
    {
        _mint(account, id, amount, data);
        _setURI(id,tokenURI) ;
    }
 function uri(uint256 tokenId) public view virtual override(ERC1155, ERC1155URIStorage) returns (string memory){
        return super.uri(tokenId);
    }

    //  function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {
    //     _tokenURIs[tokenId] = tokenURI;
    //     emit URI(uri(tokenId), tokenId);
    // }

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        _mintBatch(to, ids, amounts, data);
    }
}
